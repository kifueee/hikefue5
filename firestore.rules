rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    // WARNING: These rules are for development only. DO NOT use in production!
    match /{document=**} {
      allow read, write: if true;
    }

    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isAdmin() {
      return isAuthenticated() && 
        exists(/databases/$(database)/documents/admins/$(request.auth.uid));
    }
    
    function isOrganizer() {
      return isAuthenticated() && 
        exists(/databases/$(database)/documents/organizers/$(request.auth.uid)) &&
        get(/databases/$(database)/documents/organizers/$(request.auth.uid)).data.status == 'approved';
    }
    
    function isParticipant() {
      return isAuthenticated() && 
        exists(/databases/$(database)/documents/participants/$(request.auth.uid));
    }
    
    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }

    // Admins collection
    match /admins/{adminId} {
      allow read: if isAdmin();
      allow write: if isAdmin();
    }

    // Organizers collection
    match /organizers/{organizerId} {
      // Anyone can read approved organizers
      allow read: if true;
      
      // Authenticated users can create their own organizer document during registration
      allow create: if isAuthenticated() && request.auth.uid == organizerId;
      allow update: if isAdmin() || (isOwner(organizerId) && resource.data.status == 'pending');
      allow delete: if isAdmin();
    }

    // Participants collection
    match /participants/{participantId} {
      // Anyone can read participant profiles
      allow read: if true;
      
      // Participants can only write to their own document
      allow create: if isAuthenticated();
      allow update: if isOwner(participantId);
      allow delete: if isAdmin();
    }

    // Organizer registrations collection
    match /organizer_registrations/{registrationId} {
      // Only admins can read all registrations
      allow read: if isAdmin();
      
      // Authenticated users can create their own registration
      allow create: if isAuthenticated() && request.auth.uid == registrationId;
      
      // Only admins can update/delete registrations
      allow update, delete: if isAdmin();
    }

    // Events collection
    match /events/{eventId} {
      // Anyone can read events
      allow read: if true;
      
      // Only approved organizers can create events
      allow create: if isOrganizer() && 
        get(/databases/$(database)/documents/organizers/$(request.auth.uid)).data.status == 'approved';
      
      // Only the event organizer or admins can update/delete events
      allow update, delete: if isOrganizer() && resource.data.organizer.id == request.auth.uid || isAdmin();
      
      // Subcollections
      match /participants/{participantId} {
        allow read: if true;
        allow write: if isOrganizer() && get(/databases/$(database)/documents/events/$(eventId)).data.organizer.id == request.auth.uid || isAdmin();
      }
      
      match /reviews/{reviewId} {
        allow read: if true;
        allow create: if isParticipant();
        allow update, delete: if isOwner(resource.data.userId) || isAdmin();
      }
    }

    // Carpool collection
    match /carpools/{carpoolId} {
      allow read: if true;
      allow create: if isParticipant() || isOrganizer();
      allow update, delete: if isOwner(resource.data.organizerId) || isAdmin();
      
      match /riders/{riderId} {
        allow read: if true;
        allow write: if isParticipant() || isOrganizer();
      }
    }

    // Notifications collection
    match /notifications/{notificationId} {
      allow read: if isAuthenticated() && resource.data.userId == request.auth.uid;
      allow create: if isAdmin() || isOrganizer();
      allow update, delete: if isAdmin() || (isOwner(resource.data.userId) && request.resource.data.diff(resource.data).affectedKeys().hasOnly(['read']));
    }

    // Emergency contacts collection
    match /emergencyContacts/{contactId} {
      allow read: if isOwner(resource.data.userId);
      allow write: if isOwner(resource.data.userId);
    }

    // Default deny
    match /{document=**} {
      allow read, write: if false;
    }
  }
}